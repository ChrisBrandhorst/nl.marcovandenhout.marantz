

module.exports.added = function( device_data, callback ) {
    // run when a device has been added by the user (as of v0.8.33)
		Homey.log("Marantz app - device added: " + JSON.stringify(device_data));
		// update devices data array
    initDevice( device_data );
		Homey.log('Marantz app - add done. devices =' + JSON.stringify(devices));
		callback( null, true );
}

module.exports.renamed = function( device_data, new_name ) {
    // run when the user has renamed the device in Homey.
    // It is recommended to synchronize a device's name, so the user is not confused
    // when it uses another remote to control that device (e.g. the manufacturer's app).
		Homey.log("Marantz app - device renamed: " + JSON.stringify(device_data) + " new name: " + new_name);
		// update the devices array we keep
		devices[device_data.id].data.name = new_name;
}

module.exports.deleted = function( device_data ) {
    // run when the user has deleted the device from Homey
		Homey.log("Marantz app - device deleted: " + JSON.stringify(device_data));
		// remove from the devices array we keep
    delete devices[ device_data.id ];
}

// handling settings (wrench icon in devices)
module.exports.settings = function( device_data, newSettingsObj, oldSettingsObj, changedKeysArr, callback ) {
    // run when the user has changed the device's settings in Homey.
    // changedKeysArr contains an array of keys that have been changed, for your convenience :)

    // always fire the callback, or the settings won't change!
    // if the settings must not be saved for whatever reason:
    // callback( "Your error message", null );
    // else callback( null, true );

		Homey.log ('Marantz app - Settings were changed: ' + JSON.stringify(device_data) + ' / ' + JSON.stringify(newSettingsObj) + ' / old = ' + JSON.stringify(oldSettingsObj) + ' / changedKeysArr = ' + JSON.stringify(changedKeysArr));

		try {
      changedKeysArr.forEach(function (key) {
					switch (key) {
						case 'settingIPAddress':
							Homey.log ('Marantz app - IP address changed to ' + newSettingsObj.settingIPAddress);
							// FIXME: check if IP is valid, otherwise return callback with an error
							break;
					}
      })
      callback(null, true)
    } catch (error) {
      callback(error)
    }

}

// capabilities

module.exports.capabilities = {
    onoff: {

        get: function( device_data, callbackCapability ){


        set: function( device_data, turnon, callbackCapability ) {

	        Homey.log('Marantz app - Setting device_status of ' + device_data.id + ' to ' + turnon);

					if (turnon) {
						var command = 'PWON\r';
						sendCommandToDevice ( device_data, command );
						callbackCapability (null, true);

					} else {
						var command = 'PWSTANDBY\r';
						sendCommandToDevice ( device_data, command );
						callbackCapability (null, true);

					}
        }
    }
}

// end capabilities

// start flow action handlers

Homey.manager('flow').on('action.powerOn', function( callback, args ){
	var device = args.device;
	var zone = args.zone;
	powerOn ( device, zone );
  callback( null, true ); // we've fired successfully
});

Homey.manager('flow').on('action.powerOff', function( callback, args ){
	var device = args.device;
	var zone = args.zone;
	powerOff ( device, zone );
  callback( null, true ); // we've fired successfully
});

Homey.manager('flow').on('action.changeInput', function( callback, args ){
	var input = args.input.inputName;
	var zone = args.zone;
	var device = args.device;
	changeInputSource ( device, zone, input );
  callback( null, true ); // we've fired successfully
});

Homey.manager('flow').on('action.changeInput.input.autocomplete', function( callback, value ) {
	var inputSearchString = value.query;
	var items = searchForInputsByValue( inputSearchString );
	callback( null, items );
});

Homey.manager('flow').on('action.mute', function( callback, args ){
	var device = args.device;
	var zone = args.zone;
	mute ( device, zone );
  callback( null, true ); // we've fired successfully
});

Homey.manager('flow').on('action.unMute', function( callback, args ){
	var device = args.device;
	var zone = args.zone;
	unMute ( device, zone );
  callback( null, true ); // we've fired successfully
});

Homey.manager('flow').on('action.setVolume', function( callback, args ){
	var device = args.device;
	var zone = args.zone;
	var targetVolume = args.volume;
	setVolume ( device, zone, targetVolume );
  callback( null, true ); // we've fired successfully
});

Homey.manager('flow').on('action.setVolumeStep', function( callback, args ){
	var device = args.device;
	var zone = args.zone;
	var targetVolume = args.volume;
	setVolumeStep ( device, zone, targetVolume );
  callback( null, true ); // we've fired successfully
});

Homey.manager('flow').on('action.customCommand', function( callback, args ){
	var device = args.device;
	var customCommand = args.command+'\r';
	sendCommandToDevice ( device, customCommand );
  callback( null, true ); // we've fired successfully
});

//

function changeInputSource ( device, zone, input ) {
	// supported zones: "Main Zone" (default), "Zone2", "Zone3"
		var sourceZone = 'SI';
		switch (zone) {
			case 'Main Zone':
				sourceZone = 'SI';
				break;
			case 'Zone2':
				sourceZone = 'Z2';
				break;
			case 'Zone3':
				sourceZone = 'Z3';
				break;
		}
		var command = sourceZone+input+'\r';
		sendCommandToDevice ( device, command );
}

function mute ( device, zone ) {
	// supported zones: "Main Zone" (default), "Zone2", "Zone3"
	var command = 'MUON\r';
	switch (zone) {
		case 'Main Zone':
			command = 'MUON\r';
			break;
		case 'Zone2':
			command = 'Z2MUON\r';
			break;
		case 'Zone3':
			command = 'Z3MUON\r'
			break;
	}
	sendCommandToDevice ( device, command );
}

function unMute ( device, zone ) {
	// supported zones: "Main Zone" (default), "Zone2", "Zone3"
	var command = 'MUOFF\r';
	switch (zone) {
		case 'Main Zone':
			command = 'MUOFF\r';
			break;
		case 'Zone2':
			command = 'Z2MUOFF\r';
			break;
		case 'Zone3':
			command = 'Z3MUOFF\r'
			break;
	}
	sendCommandToDevice ( device, command );
}

function setVolume ( device, zone, targetVolume ) {
// volume ranges from 00 to 99
// apparently half steps are possible but not used here, eg 805 is 80.5
// according to Marantz protocol some models have 99 as --, some have 00 as --
	var asciiVolume = "0"+targetVolume.toString();
	var asciiVolume = asciiVolume.slice(-2);
// supported zones: "Main Zone" (default), "Zone2", "Zone3"
	var volumeZone = 'MV';
	switch (zone) {
		case 'Main Zone':
			volumeZone = 'MV';
			break;
		case 'Zone2':
			volumeZone = 'Z2';
			break;
		case 'Zone3':
			volumeZone = 'Z3';
			break;
	}
	var command = volumeZone+asciiVolume+'\r';
	sendCommandToDevice ( device, command );
}

function setVolumeStep ( device, zone, targetVolume ) {
// volume ranges from 00 to 99
// apparently half steps are possible but not used here, eg 805 is 80.5
// according to Marantz protocol some models have 99 as --, some have 00 as --
var asciiVolume = null;
if(targetVolume > 0) {
	asciiVolume = 'UP';
}
if(targetVolume < 0) {
	asciiVolume = 'DOWN';
}
	if(asciiVolume !== null) {
		// supported zones: "Main Zone" (default), "Zone2", "Zone3"
		var volumeZone = 'MV';
		switch (zone) {
			case 'Main Zone':
				volumeZone = 'MV';
				break;
			case 'Zone2':
				volumeZone = 'Z2';
				break;
			case 'Zone3':
				volumeZone = 'Z3';
				break;
		}
		var command = volumeZone+asciiVolume+'\r';
		for(var i = 0; i < Math.abs(targetVolume); i++) {
			setTimeout(function(device, command) {

				sendCommandToDevice ( device, command );
			}, (i * 750), device, command);
		}
	}
}


function searchForInputsByValue ( value ) {
// for now, consider all known Marantz/Denon inputs
	var possibleInputs = allPossibleInputs;
	var tempItems = [];
	for (var i = 0; i < possibleInputs.length; i++) {
		var tempInput = possibleInputs[i];
		if ( tempInput.friendlyName.indexOf(value) >= 0 ) {
			tempItems.push({ icon: "", name: tempInput.friendlyName, inputName: tempInput.inputName });
		}
	}
	return tempItems;
}

// a helper method to add a device to the devices list
function initDevice( device_data ) {
    devices[ device_data.id ] = {};
    devices[ device_data.id ].state = { onoff: true };
    devices[ device_data.id ].data = device_data;
}
